name = 'Anatoliy'
print(name)
print('Hello ' + name) # операция "слодения" строк
print(name*5) # умножение строк
print(name[0]) # отсчет элементов в строке начинается с нуля.
print(name[-1]) # возможно использование отрицательных индексов ( то есть писать с конца
print(name[0:4]) # первое значение, которое перед ":" - обязательное, двоеточие ':' между индексами говорит, -"напиши часть строки от А до В (А:В), не включая последний элемент, т.е. до него
print(name[0:4:3]) # знак после второго двоеточия : говорит, -"выводи значения от А до И с шагом С.
print(name[:3]) # когда мы пропускаем "0", то говорим, что идем сначала.
print(name[2:]) # конструкция означает, начинай со второго индекса и до конца
print(name[-2])
print(name[-1] + name[-2] + name[-3]+name[-4])
print(name[::-1]) # выводятся все символы, т.к. не указаны границы, но обратном порядке, поскольку порядок -1
print(name[::1])
# Пробел является символом, который по умолчанию ставится между выводимыми значениями.
# Вместо пробела можно указать любую другую строку, даже пустую.
# Для этого нужно передать в функцию print() именованный аргумент sep (англ. separator — «разделитель»).
# Обратите внимание: для именованных аргументов вокруг символа "=" не ставятся пробелы.
# Сделаем так, чтобы вместо пробела в качестве разделителя использовалась пустая строка:

# БЫЛО
name = "Пользователь"
print("Добрый день,", name, ".")
# СТАЛО
name = "Пользователь"
print("Добрый день, ", name, ".", sep="")
# Но в таком случае необходимые пробелы нам придётся ставить самим, а это неудобно.
# К счастью, в Python существует удобный и мощный инструмент для форматирования строк — f-строки.
# Чтобы задать f-строку, необходимо поставить букву f перед открывающей кавычкой строки.
# Далее f-строка записывается как единое целое, с учётом правил её форматирования, и закрывается соответствующей кавычкой:
print(f"Добрый день, {name}.")
# f-строки также можно использовать для выравнивания строк.
# Например, если требуется добавить символы "0" слева (для выравнивания по правому краю), справа (для выравнивания по левому краю)
# или слева и справа (для выравнивания посередине) от исходной строки до достижения длины в 9 символов:
print(f'{123:0>9}')
print(f'{123:0<9}')
print(f'{123:0^9}')
# Внутри f-строк можно обращаться к переменным, используя фигурные скобки,
# как в примере выше, а также производить операции, выполнять функции и подставлять их результаты в данную строку.
# И это только малая часть возможностей f-строк.
# Более подробно про них можно почитать в данном источнике.

# Наряду с f-строками существует функция format(), которая также предназначена для удобного форматирования (мы рассмотрим её чуть позже).
# Также форматирование строк может производиться с помощью символа %.
# Однако данный способ форматирования является устаревшим (здесь можно почитать про него подробнее).

# В строках можно применять управляющие символы, начинающиеся с символа «бэкслеш» \. Например:
#
# \n — переход на новую строку;
# \t — табуляция;
# \r — возврат каретки в начало строки;
# \b — возврат каретки на один символ.
# Кроме того, с помощью бэкслеша можно экранировать символы, то есть делать их частью выводимой строки.
# Например, для вывода символа \ необходимо его экранировать самим собой:
second_name = 'User'
print("\\")
print(f'{name}, \n{second_name}')
print(f'{name}, \t{second_name}')
print(f'{name}, \r{second_name}')
print(f'{name}, \b{second_name}')
# В функции print() кроме параметра sep существует параметр end, который определяет символ в конце строки.
# Значение по умолчанию для него — переход на новую строку, обозначаемый как \n.
# Если вывести строки с помощью нескольких использований функции print(), то вывод каждой из них будет осуществлён с новой строки:
print(name, end='!')
print(name)


# inrut() - риглашение пользователю дать нужную информацию прогриамме, с корторой питон будет работать
# name = input('\nВведите Ваше имя: ')
# current_year = 2024
# date_of_birth = int(input('В каком году вы родились? '))
# age = current_year - date_of_birth
# print('Здравствуйте, ', name)
# print('В этом году Вам',age, 'лет')

# форматированеи строк
# .upper() в конце строки - обратит весь текст в КАПС
# .lower() обратит строку в нижний регистр
# .replace() - изменение символов в строке
print('привет, я строка в нижнем регистре' .upper())
print('привет, я строка в нижнем регистре' .upper().lower())
print('привет, я строка в нижнем регистре' .replace('привет', 'здарова'))
print('привет, я строка в нижнем регистре' .replace(' ', '')) #бираем пробелы, если вписать '#',
# то убранные пробелы пометятся #
print('привет, я строка в нижнем регистре' .replace(' ', '#'))














