#Словарь - это коллекция, в которой элементы хранятся парами (идентификатор + значение),
# относитсчя к изменяемым типам данных, словарь - неупорядоченная коллекция
phone_book = {'Dina': 89093446574, 'Bro': 89875067878}
print(phone_book)
# первым указываю ключ, вторым - значение
# В качестве ключа используется неизменяеымый тип данных. Нельзя в качестве ключа использовать "лист"
# Значения наобьорот, могут содерждать изменяемый тип данных.

# МЕТОДЫ РАБОТЫ СО СЛОВАРЕМ
#Как при работе со списками, можно обращаться к элементам словаря
print(phone_book['Dina'])
# я могу заменить содержимое каждого "ключа" словаря
phone_book['Bro'] = 12345678
print(phone_book['Bro'])
# Если я присвою значение к несуществующему ключу, то он его созждаст
phone_book['Danya'] = 890035353535
print(phone_book)
#чтобы удалить ключь, воспользуемся "del"
del phone_book['Bro']
print(phone_book)
# для измененя\добавления сразу нескольких ключей в словарь используем .update
phone_book.update({'Ruslan' : 89003453231,
                   'Vladislav': 78975643435,
                   'Anton': 890094854785,
                   'Dina': 89003446868})
print(phone_book)

# для обращения к существующим значениям пользуются оператором .get
print(phone_book.get('Regina', 'пусто'))
# .pop - метод, вырезающий ключ со значением из словаря, но не забывающий его. к нему можно обратить позже
print(phone_book)
phone_book.pop('Danya') #я могу присвоить переменной данное значение и обращать к ключу
# a = phone_book.pop('Danya'), print(a) - в консоли телефон Дани
list_ = [1,2,3,4]
list_.pop(0)
print(list_)
print(phone_book)
# KEYS - список ключей из словаря
print(phone_book.keys())
# values - значения словарика
print(phone_book.values())
# для отображения попарно .items
print(phone_book.items())
# В значения ключа я могу помешать изменяемый тип данных, например
phone_book_2 = {'Dinarik': [89093446574, 89997053131, 5432321]}
print(phone_book_2)

# Set_ МНОЖЕСТВО, этот тип данных хранит в себе уникальные значения, поэтому повторяющиеся данные не выводятся в консоль
#Внутри множества хранятся разные типы данных
set_ = {1,2,3,4,5,6,4,5,6, 'string', True, (7,8,9)}
print(set_)
# Если у меня в списке есть повторяющиеся значения, то я могу преобразовать его во "множество - set".
# Так я получу только уникальные значения
list1 = [1,2,3,4,2,3,3,2,3,2,1,2,3]
print(list1)
print(set(list1))
# я хочу, чтобы мой список стал "уникальны", присвою ему значение set
list1 = set(list1)
print(list1)
# Но после этого нельзя обратиться к конкретному элементу списка
#print(list1[0]) - TypeError: 'set' object is not subscriptable
# для удаления элементов множества используют .discard и .remove
# Их отличие в том, что если при удалении элемент во множестве не отыскивается, .remove даст ошибку.
# Нельзя удалить то, чего нет. .discard же промолчит, сделает вид, что удалил несуществующий объект.
list1.remove(1)
print(list1)
list_2 = [1,1,1,1,2,3,2,2]
list_2 = set(list_2)
print(list_2)
print(list_2.remove(2))
print(list_2)
# Для добавления элемента во множесто пользуемся .add
list_2.add(2)
print(list_2)













